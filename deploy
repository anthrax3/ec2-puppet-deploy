#!/usr/bin/env python

# Python standard library modules
import optparse
import os
import socket
import sys

# 3rd party modules
import boto.ec2
from boto.exception import EC2ResponseError
import yaml

parser = optparse.OptionParser('usage: %prog -e ENVIRONMENT')
parser.add_option(
    '-e',
    '--environment',
    dest='environment',
    type='string',
    help='specify environment you want to deploy to',
)
parser.add_option(
    '-r',
    '--region',
    dest='region',
    type='string',
    help='specify an EC2 region you want to deploy to (optional)',
)
parser.add_option(
    '-u',
    '--user',
    dest='user',
    type='string',
    help='specify the SSH user to run deployment commands as (optional)',
)
options, args = parser.parse_args()
if options.environment is None:
    parser.print_help()
    sys.exit(-1)

environment = options.environment

# Try to open and parse the config.yaml file
try:
    config = yaml.load(open('config.yaml', 'r'))
except yaml.scanner.ScannerError:
    sys.stderr.write('Error: Could not parse config.yaml file.')
    sys.exit(1)
except IOError:
    sys.stderr.write('Error: Could not open config.yaml file.')
    sys.exit(1)

region = options.region if options.region else config['default_ec2_region']
ssh_user = options.user if options.user else config['ssh_user']

# Connect to EC2
try:
    conn = boto.ec2.connect_to_region(region)
except:
    sys.stderr.write('Error: Boto authentication error. Do you have a ~/.boto file?\n')
    sys.exit(1)

# Get a list of puppet master addresses for the given environment
try:
    reservations = conn.get_all_instances(filters={
        'tag:' + config['environment_tag_key']: environment,
        'tag:' + config['puppet_master_tag_key']: config['puppet_master_tag_value'],
    })
except EC2ResponseError as e:
    sys.stderr.write('EC2 Error: ' + e.message)
    sys.exit(1)
except socket.gaierror:
    sys.stderr.write('Error: General socket connection failure.')
    sys.exit(1)

instances = [i for r in reservations for i in r.instances]
puppet_masters = [i.private_ip_address for i in instances]

if not puppet_masters:
    sys.stderr.write('Error: No puppetmasters found for environment "%s".' % environment)
    sys.exit(1)

# Get the first (possibly only) gateway for the given environment
reservations = conn.get_all_instances(filters={
    'tag:' + config['environment_tag_key']: environment,
    'tag:' + config['gateway_tag_key']: config['gateway_tag_value'],
})
instances = [i for r in reservations for i in r.instances]
try:
    jumpbox = [i.ip_address for i in instances][0]
except IndexError:
    sys.stderr.write('Error: Could not find a jumpbox for environment "%s".' % environment)
    sys.exit(1)

print 'Gateway: %s' % jumpbox

os.system('fab --user=%s --hosts=%s --gateway=%s %s deploy' % (
    ssh_user,
    ','.join(puppet_masters),
    jumpbox,
    '--parallel' if config['parallel_deployment'] else ''
))
